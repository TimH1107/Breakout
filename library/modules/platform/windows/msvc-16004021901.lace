require 'open3'

third_party_blob( "core", "platform/windows/msvc-16004021901", "a74f9e49b97d5dd9a2ac347dcd2512fcf785c92b", :unknown ) do

	vc_dir = base_path()
	@project.globals.vc_dir = vc_dir

	@project.globals.set_vc_env = proc do |env|
		path_dirs = (vc_dir + 'bin').to_s.gsub(/\//, '\\')
		env['Path'] = path_dirs
		if @project.is_64bit_target
			env['LIB'] = '"' + (vc_dir + 'lib/amd64').to_s.gsub(/\//, '\\') + '"'
		else
			env['LIB'] = '"' + (vc_dir + 'lib').to_s.gsub(/\//, '\\') + '"'
		end
	end

	module MSVCCompilerMixin

		def getExceptionParameter()
			exception_attributes = @project.global_context.get_attribute_value(:se_exceptions)
			if exception_attributes
				return '/EHa'
			else
				exception_attributes = @project.global_context.get_attribute_value(:cpp_exceptions)
				if exception_attributes
					return '/EHsc'
				end
			end
			return ''
		end

		def getUnicodeParameter()
			unicode_attributes = @project.global_context.get_attribute_value(:unicode)
			if unicode_attributes
				defines = []
				defines << "_UNICODE"
				defines << "UNICODE"
				return defines.map {|d| ['/D', d] }
			else
				return ''
			end

		end

		def get_executable_file()
			if @project.is_64bit_target
				@project.globals.vc_dir + 'bin/amd64/cl.exe'
			else
				@project.globals.vc_dir + 'bin/cl.exe'
			end
		end

	end

	class MSVCCompiler < SingleFileCompiler
		include MSVCCompilerMixin

		def output_name(file)
			@output_path + ( file.path.basename( '.*' ).to_s + ".obj" )
		end

		def join_command_line(*args)
			cmds = args.flatten.map do |arg|
				case arg
				when Pathname, InputFile
					make_relative(arg.path)
				when Set
					arg.to_a
				else
					arg.to_s
				end
			end

			return cmds.map {|a| / / =~ a ? '"'+a+'"' : a}.join(' ')
		end

		def make_command_line_array(infile,outfile)
			system_include_dirs = infile.context.get_attribute_set(:cpp_system_include_dir).map {|d| ['/I', d] }
			include_dirs = infile.context.get_attribute_set(:cpp_include_dir).map {|d| ['/I', d] }
			low_prio_include_dirs = infile.context.get_attribute_set(:low_prio_cpp_include_dir).map {|d| ['/I', d] }
			defines = collect_cpp_defines( infile.context ).map {|d| ['/D', d] }
			warn_level = '/W' + (infile.context.get_attribute_value(:cpp_warning_level) || 'all').to_s
			disabled_warnings = get_disabled_warnings(infile)
			enable_ms_extensions = infile.context.get_attribute_value(:msvc_enable_ms_extensions) == true
			enable_openmp = infile.context.get_attribute_value(:enable_openmp) == true
			enable_bigobj = infile.context.get_attribute_value(:enable_bigobj) == true
			enable_rtti = infile.context.get_attribute_value(:cpp_rtti) == true

			optimization = infile.context.get_attribute_value(:cpp_optimization)
			optimization_options = case optimization
			when :none, nil
				[]
			when :full
				['/O2']
			else
				optimization.split()
			end

			unicode_parameter = getUnicodeParameter()
			result = [ '/nologo',
				@build_type_switch,
				warn_level, disabled_warnings,
				system_include_dirs,
				include_dirs,
				low_prio_include_dirs,
				defines,
				@project.build_tags.include?('debug') ? '/D_DEBUG' : '/DNDEBUG',
				@project.is_64bit_target ? [] : '/arch:SSE2',
				# '/d1reportAllClassLayout',
				# '/d1reportSingleClassLayoutMyAwesomeTestClass',
				enable_bigobj == true ? '/bigobj' : '',
				enable_ms_extensions == true ? '' : '/Za',
				optimization_options,
				enable_openmp == true ? '/openmp' : '',
				enable_rtti == true ? '/GR' : '',
				getExceptionParameter,
				unicode_parameter,
				'/showIncludes', '/WX', '/Z7', '/c', '/Fo' + make_relative(outfile), infile.path.to_s ]
			return result
		end

		def process_files(files, num_jobs)
			@build_type_switch = get_build_type_switch

			output_names = files.map{|f| output_name(f)}
			dfiles = output_names.map{|o| o.to_s.sub(/\.obj/, '.d')}
			loadDependencyFiles( dfiles )

			Helpers::temp_env do |env|
				@project.globals.set_vc_env.call(env)
				# just included so that this env variable will be removed after compiling
				env['INCLUDE'] = ""
				env.delete('VS_UNICODE_OUTPUT')

				super(files, num_jobs)
			end
		end

		def compile(infile, outfile)
			dfile = outfile.to_s.sub(/\.obj/, '.d')

			exe_path = get_executable_file()
			check_optimized_dependencies(infile.path, dfile) do

				if (@project.is_64bit_target)
					trace "Compiling(msvc16,x64) %s", infile.path
				else
					trace "Compiling(msvc16,x86) %s", infile.path
				end

				dependencies = Dependencies.new
				dependencies.add_output(outfile)
				dependencies.add_input(infile.path.to_s)
				dependencies.add_input(exe_path)

				command_line = make_command_line_array( infile, outfile )

				sh exe_path, command_line do |lines|
					for line in lines
						case line
						when /^Note: including file:\s+(.*)$/
							dependencies.add_input($1)
						when /^\w+\.c(pp)?$/
						else
							trace "%s", line
						end
					end
				end

				write_optimized_dependencies(dependencies,dfile)
			end
		end

		def get_build_type_switch

			link_type = @project.globals.msvc_link_type
			threading_type = @project.globals.msvc_threading_type

			if threading_type != :multi and threading_type != :single
				abort_build "You have to specify a threading type. Use set_build_options()!"
			end

			if  link_type == :dynamic
				build_type = '/MD' if threading_type == :multi
			elsif link_type == :static
				build_type = '/ML' if threading_type == :single
				build_type = '/MT' if threading_type == :multi
			else
				abort_build "You have to specify a link type. Use set_build_options()!"
			end

			if build_type
				if @project.build_tags.include?('debug')
					build_type = build_type + 'd'
				end
			else
				raise "Invalid combination of link type and threading type. (#{link_type}, #{threading_type})"
			end

			return build_type
		end

		def get_disabled_warnings(infile)
			disabled_warnings = infile.context.get_attribute_set(:msvc_disabled_warnings)

			disabled_warnings << 4625	# copy constructor could not be generated because base class copy constructor is inaccessible.
			disabled_warnings << 4626	# assignment operator could not be generated because base class assignment operator is inaccessible.
			disabled_warnings << 4511	# copy constructor could not be generated (probably base class copy constructor is inaccessible)
			disabled_warnings << 4512	# assignment operator could not be generated (probably base class assignment operator is inaccessible)
			disabled_warnings << 4355	# 'this': used in base member initializer list -> this is ok, ex. with EventSignal

			# these warnings are over the top, we don't want to use them because it gets tedious / ridiculous
			disabled_warnings << 4061	# enumerator X in switch is not explicitly handled
			disabled_warnings << 4206	# the file was empty after preprocessing

			# these are informational about optimizing and performance, would be nice to have as an info / diagnostics level, but not for the day-to-day work.
			disabled_warnings << 4820	# padding added to struct members
			disabled_warnings << 4514	# unreferenced inline function has been removed
			disabled_warnings << 4710	# function not inlined
			disabled_warnings << 4711	# 'selected for automatic inline expansion'
			disabled_warnings << 4505	# unreferenced local function has been removed

			disabled_warnings << 4738	# 'storing 32-bit float result in memory, possible loss of performance'

			disabled_warnings << 4619	# 'there is no warning number xxx'

			disabled_warnings << 4986	# 'operator new[]': exception specification does not match previous declaration

			# we would probably want to have the following alive, but we can't due to crt / c++ lib bugs from M$.
			disabled_warnings << 4548	# 'expression before comma has no effect; expected expression with side-effect' -> unfortunately, the stl brings up this warning.
			disabled_warnings << 4702	# 'unreachable code' -> because of the sucking msvc stl implementation!
			disabled_warnings << 4555   # 'expression has no side effect; expected expression with side-effect' - thrown by msvc/include/list

			# these should not be in the default disabled set. Check if they can be removed.
			#disabled_warnings << 4217# 'member template functions cannot be used for copy-assignment or copy-construction'
			#disabled_warnings << 4996# 'xxxx : this function or variable may be unsafe, consider using different function'
			#disabled_warnings << 4127# conditional expression is constant
			#disabled_warnings << 4815# zero sized array in stack object will have no elements
			#disabled_warnings << 4189# local variable is initialized but not referenced
			#disabled_warnings << 4668# symbol is not defined as a preprocessor macro
			disabled_warnings << 4640	# construction of local static object is not thread safe
			disabled_warnings << 4245	# conversion from const value to value signed / unsigned mismatch.
			disabled_warnings << 4571	# 'Informational: catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught'
			disabled_warnings << 4987	# nonstandard extension used: 'throw (...)'

			return disabled_warnings.map {|w| '/wd' + w.to_s}
		end

		def output_files(files)
			super(files)
		end
	end

	class MSVCLinker < MultiFileCompiler
		include MSVCCompilerMixin

		def output_name
			dll = @project.globals.win32_target == :dll

			target_extension = @project.globals.target_extension || (dll ? '.dll' : '.exe')

			@output_path + ((@project.globals.target_name || @project.name) + target_extension)
		end

		def run_mt
			trace 'creating manifest'

			return

			manifest_files = [output_name.to_s + '.manifest']

			manifest_files.each do |f|
				trace 'using ' + f.to_s
			end

			sh @project.globals.vc_dir + 'bin/mt.exe', '-nologo', '-manifest', manifest_files, '-outputresource:' + output_name.to_s + ';1'
		end

		def compile(infiles)
			Helpers.temp_env do |env|
				env.delete('VS_UNICODE_OUTPUT')
				@project.globals.set_vc_env.call(env)
				lib_dirs = @project.global_context.get_attribute_set(:lib_dir)
				low_prio_lib_dirs = @project.global_context.get_attribute_set(:low_prio_lib_dir)
				libs = @project.global_context.get_attribute_set(:libs)
				dlls = @project.global_context.get_attribute_set(:dlls)
				exclude_libs = @project.global_context.get_attribute_set(:excludelibs)
				subsystem = @project.globals.win32_subsystem

				linktarget = @project.globals.win32_target || :exe
				disabled_warnings = get_disabled_warnings()

				def_files = infiles.select {|i| i.tags.include? '.def'}
				abort_build 'Only 1 .def might be added to the source tree' if def_files.size > 1
				infiles.delete(*def_files) if def_files.size == 1
				if linktarget == :dll
					dll_commands = ['/DLL']
					dll_commands << '/DEF:' + def_files[0].path.to_s if (def_files.size == 1)
				else
					dll_commands = []
				end

				#if (@project.globals.msvc_uac_options)
				#	dll_commands << '/MANIFEST'
				#	dll_commands << '/MANIFESTUAC:' + @project.globals.msvc_uac_options.to_s
				#end

				dll_commands << '/MANIFEST:NO'

				if ( not @project.is_64bit_target )
					laa_options = [ '/LARGEADDRESSAWARE' ]
				else
					laa_options = []
				end

				if @project.build_tags.include?('release') || @project.build_tags.include?('master')
					incremental_link = '/INCREMENTAL:NO'
				else
					incremental_link = '/INCREMENTAL'
				end

				trace 'linking'
				response_sh get_executable_file(),
					'/nologo',
					infiles.map {|f| f.path }, '/Fe' + output_name.to_s,
					'/link',
					dll_commands,
					laa_options,
					incremental_link,
					disabled_warnings,
					'/debug', '/debugtype:cv',
					exclude_libs.map {|e| '/NODEFAULTLIB:' + e},
					lib_dirs.map {|d| '/libpath:' + Helpers::quote_path(d) },
					low_prio_lib_dirs.map {|d| '/libpath:' + Helpers::quote_path(d) },
					libs,
					subsystem ? '/SUBSYSTEM:' + subsystem : []

				#~ if @project.globals.msvc_link_type == :dynamic
					#~ run_mt
				#~ end

				dlls = @project.global_context.get_attribute_set(:dlls)
				unless dlls.empty?
					dlls.each do |dll|
						dll_source_name = dll.to_s
						dll_target_name = (@output_path + dll.basename).to_s
						if Helpers.newer? dll_source_name, dll_target_name
							trace "Copying dll " + dll.basename.to_s
							FileUtils.cp(dll_source_name, dll_target_name)
						end
					end
				end
			end
		end

		def get_disabled_warnings()
			disabled_warnings = @project.global_context.get_attribute_set(:msvc_disabled_linker_warnings)

			# fun fact: unignorable (http://www.geoffchappell.com/studies/msvc/link/link/options/ignore.htm)
			disabled_warnings << 4099	# PDB 'vc100.pdb' was not found with '...'

			return disabled_warnings.map {|w| '/ignore:' + w.to_s}
		end
	end

	class MSVCResourceCompiler < SingleFileCompiler
		def compile(infile, outfile)
			if Helpers.newer? infile.path, outfile
				include_dirs = @project.global_context.get_attribute_set(:resource_include_dirs)
				Helpers.temp_env do |env|
					@project.globals.set_vc_env.call(env)
					sh 'rc', '/x', include_dirs.map {|id| ['/i', id.to_s.gsub('/','\\')]}, '-fo', outfile, infile.path
				end
			end
		end

	end

	add_global_path :resource_include_dirs, 'include'
	add_global_path :cpp_system_include_dir, 'include'
	add_global_path :cpp_system_include_dir, '.'

	if @project.global_context.get_attribute_value(:enable_openmp) == true
		#puts 'OpenMP support enabled'
		if (@project.is_64bit_target)
			if(@project.build_tags.include?('debug'))
				add_file 'redist/Debug_NonRedist/x64/Microsoft.VC100.DebugOpenMP/vcomp100d.dll', '.dll'
			else
				add_file 'redist/x64/Microsoft.VC100.OPENMP/vcomp100.dll', '.dll'
			end
		else
			if(@project.build_tags.include?('debug'))
				add_file 'redist/Debug_NonRedist/x86/Microsoft.VC100.DebugOpenMP/vcomp100d.dll', '.dll'
			else
				add_file 'redist/x86/Microsoft.VC100.OPENMP/vcomp100.dll', '.dll'
			end
		end
	end

	define_compiler(MSVCCompiler, :input_pattern => tag('.cpp') | tag('.c'), :dependency_pattern => tag('.hpp') | tag('.h'), :output_name => 'cpp_compiler/%.obj') do
	end


	define_compiler(MSVCLinker, :input_pattern => tag('.obj')|tag('.res')|tag('.def'), :output_tags => [ '.exe', '.dll' ]) do
	end


	define_compiler(MSVCResourceCompiler, :input_pattern => tag('.rc'), :output_name => 'resource_compiler/%.res') do
	end

	# copy the debug runtime dlls over to be able to run the debug build
	if @build_tags.include?('debug')
		if @project.is_64bit_target
			#add_dll 'redist/Debug_NonRedist/x64/Microsoft.VC100.DebugCRT/Microsoft.VC100.DebugCRT.manifest'
			#! redist/Debug_NonRedist/x64/Microsoft.VC100.DebugCRT/msvcm100d.dll
			! redist/Debug_NonRedist/x64/Microsoft.VC100.DebugCRT/msvcp100d.dll
			! redist/Debug_NonRedist/x64/Microsoft.VC100.DebugCRT/msvcr100d.dll
		else
			#add_dll 'redist/Debug_NonRedist/x86/Microsoft.VC100.DebugCRT/Microsoft.VC100.DebugCRT.manifest'
			#! redist/Debug_NonRedist/x86/Microsoft.VC100.DebugCRT/msvcm100d.dll
			! redist/Debug_NonRedist/x86/Microsoft.VC100.DebugCRT/msvcp100d.dll
			! redist/Debug_NonRedist/x86/Microsoft.VC100.DebugCRT/msvcr100d.dll
		end
	end

	add_global_attribute :cpp_define, '_SECURE_SCL_DEPRECATE=0'
end
