
local_dir = File.expand_path(File.dirname(__FILE__)) + '/'

inject local_dir + 'defbuild_configuration_keen.lace'
add_file local_dir + 'lace_config_game.lace', ''

module_search_path local_dir + '../modules'

@project.globals.unity_build = true

@target_platforms = []
@target_platforms += [ "win32_x86" ] if can_build_platform( :win32 )
@target_platforms += [ "win32_x64" ] if can_build_platform( :win32 )

#@target_platforms += [ "linux_x86" ] if can_build_platform( :linux )
@target_platforms += [ "linux_x64" ] if can_build_platform( :linux )

@target_platforms += [ "uwp_x86", "uwp_x64", "uwp_arm32", "uwp_arm64" ] if can_build_platform( :uwp )

# later..
#@target_platforms += [ "osx_x64" ] if can_build_platform( :osx )

@target_platforms += [ "ps4" ] if can_build_platform( :ps4 )
@target_platforms += [ "xb1" ] if can_build_platform( :xb1 )
@target_platforms += [ "nx" ] if can_build_platform( :nx )
#@target_platforms += [ "nx_win32" ] if can_build_platform( :nx )
#@target_platforms += [ "android_arm32" ] if can_build_platform( :android )
#@target_platforms += [ "ios_arm32" ] if can_build_platform( :ios )

@target_configurations = @target_platforms.product( [ "debug", "release", "master" ] ).map { |platform, config| "#{platform}/#{config}" }

import 'compiler/common'
import 'compiler/dataschema'
import 'compiler/memorylayout'
import 'compiler/shader'

@project.globals.win32_subsystem = 'WINDOWS'

enable_pointer_padding() if get_target_platform != :android

import "platform/#{@project.get_target_platform}"

case @project.get_target_platform
when :win32
	module_options 'platform/win32/mssdk', :core_dumps => true
end
