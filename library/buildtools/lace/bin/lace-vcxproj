#!/usr/bin/env ruby

lib_dir = File.dirname(__FILE__) + '/../lib'
$: << lib_dir if File.directory?(lib_dir + '/lace')

require 'lace/projectwriterbase'
require 'optparse'

module Lace
	class VisualStudioProjectFileWriter < ProjectFileWriterBase
		Version = Struct.new(:major, :minor)
		VersionMapping = Struct.new(:name, :version, :tool_version, :platform_toolset)

		def initialize( project_file, args, vcproj_version, vcproj_platform )
			supported_platforms = [
				:default,	# All
				:android,	# Visual Studio Native Android Debugging
				:tegra,		# NVIDIA Nsight Tegra Visual Studio Edition
				:uwp		# Universal Windows Platform
			]

			if not supported_platforms.include?( vcproj_platform )
				raise "'#{vcproj_platform}' is not supported"
			end

			@vcproj_version = vcproj_version
			@vcproj_platform = vcproj_platform

			@version = find_version( vcproj_version );
			if not @version
				raise "'#{vcproj_version}' is an unsupported LACE_VCPROJ_VERSION"
			end

			if vcproj_platform == :android && @version.version.major < 15
				raise "'#{vcproj_version}' doesn't supported android projects, you need at least Visual Studio 2017(15.00)."
			end

			puts "Creating #{@version.name} project..."

			super( project_file, args )
		end

		def find_version( vcproj_version )
			versions = [
				VersionMapping.new( "Visual Studio 2010", Version.new( 10, 0 ), "10.0", "v100" ),
				VersionMapping.new( "Visual Studio 2012", Version.new( 11, 0 ), "11.0", "v110" ),
				VersionMapping.new( "Visual Studio 2013", Version.new( 12, 0 ), "12.0", "v120" ),
				VersionMapping.new( "Visual Studio 2015", Version.new( 14, 0 ), "14.0", "v140" ),
				VersionMapping.new( "Visual Studio 2017", Version.new( 15, 0 ), "15.0", "v141" )
			]

			match = /([0-9]+)[\.]?([0-9]*)/.match( vcproj_version )
			major = match[ 1 ].to_i
			minor = match[ 2 ].to_i

			return versions.find{ |v| v.version.major == major && v.version.minor == minor }
		end

		def make_local(path)
			Helpers.make_relative(path).gsub(/\//, '\\')
		end

		def is_uwp_config( configuration_name )
			return configuration_name.start_with? 'uwp'
		end

		def is_native_nx_config( configuration_name )
			return configuration_name.start_with?( 'nx/' )
		end

		def is_xb1_config( configuration_name )
			return configuration_name.start_with? 'xb1'
		end

		def is_ps4_config( configuration_name )
			return configuration_name.start_with? 'ps4'
		end

		def is_android_config( configuration_name )
			return configuration_name.start_with? 'android'
		end

		def is_android_arm_config( configuration_name )
			return configuration_name.start_with? 'android_arm'
		end

		def get_android_tegra_configuration_name( configuration_name )
			return 'android_tegra_' + configuration_name[8..-1]
		end

		def is_debug_config( configuration_name )
			return configuration_name.end_with? 'debug'
		end

		def is_build_valid( configuration_name, vcproj_platform )
			if vcproj_platform == :android || vcproj_platform == :tegra
				return is_android_config( configuration_name )
			elsif vcproj_platform == :uwp
				return is_uwp_config( configuration_name )
			end

			return true
		end

		def get_platform( build, vcproj_platform )
			project = find_project(build)
			platform = get_attribute(:vcproj_platform, build).first || "Win32"

			if is_uwp_config( build ) && vcproj_platform != :uwp
				platform = "Win32"
			end

			if is_android_config( build ) && vcproj_platform != :android
				platform = "Win32"
			end

			return platform;
		end

		def remove_platform_from_configuration( configuration_name )
			configuration_name = configuration_name.gsub('_arm32_', '_')
			configuration_name = configuration_name.gsub('_arm64_', '_')
			configuration_name = configuration_name.gsub('_x86_', '_')
			configuration_name = configuration_name.gsub('_x64_', '_')

			return configuration_name
		end

		def get_configuration_name( build, vcproj_platform )
			configuration_name = build.gsub( /\//, '_' )

			if vcproj_platform == :android || vcproj_platform == :uwp
				return remove_platform_from_configuration( configuration_name )
			elsif vcproj_platform == :tegra
				return get_android_tegra_configuration_name( configuration_name )
			end

			return configuration_name
		end

		def write(filename, jobs )
			keep_dirs = [ "intermediate" ]

			valid_builds = @builds.select{ |build| is_build_valid( build, @vcproj_platform ) }

			open_file(filename) do |file|
				project_name = @project.name
				project_guid = @project.globals.vcproj_guid || '{955F73E0-6CC7-3213-8A61-FC349BCF0D03}'

				file.puts "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
				file.puts "<Project DefaultTargets=\"Build\" ToolsVersion=\"#{@version.tool_version}\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"

				if @vcproj_platform == :tegra
					file.puts "\t<PropertyGroup Label=\"NsightTegraProject\">"
					file.puts "\t\t<NsightTegraProjectRevisionNumber>11</NsightTegraProjectRevisionNumber>"
					file.puts "\t</PropertyGroup>"
				end

				# add project configurations to the project file.
				file.puts "\t<ItemGroup Label=\"ProjectConfigurations\">"

				if @vcproj_platform == :tegra
					valid_builds.each do |build|
						project = find_project( build )
						platform = get_platform( build, @vcproj_platform )
						configuration_name = get_configuration_name( build, @vcproj_platform )

						file.puts "\t\t<ProjectConfiguration Include=\"#{configuration_name}|Tegra-Android\">\n"
						file.puts "\t\t<Configuration>#{configuration_name}</Configuration>\n"
						file.puts "\t\t<Platform>Tegra-Android</Platform>\n"
						file.puts "\t\t</ProjectConfiguration>\n"
					end
				else
					configs = []
					platforms = []
					valid_configurations = []

					valid_builds.each do |build|
						project = find_project( build )
						platform = get_platform( build, @vcproj_platform )
						configuration_name = get_configuration_name( build, @vcproj_platform )

						configs << configuration_name
						platforms << platform
						valid_configurations << "#{configuration_name}|#{platform}"

						file.puts "\t\t<ProjectConfiguration Include=\"#{configuration_name}|#{platform}\">\n"
						file.puts "\t\t\t<Configuration>#{configuration_name}</Configuration>\n"
						file.puts "\t\t\t<Platform>#{platform}</Platform>\n"
						file.puts "\t\t</ProjectConfiguration>\n"
					end

					configs.uniq!
					platforms.uniq!

					# :JK: we have to write all other combinations as well.. even though we will never build them:
					all_configurations = configs.product( platforms ).collect {|c,p| "#{c}|#{p}"}
					remaining_configurations = all_configurations - valid_configurations
					remaining_configurations.each do |config|
						c, p = config.split( '|' )
						file.puts "\t\t<ProjectConfiguration Include=\"#{config}\">\n"
						file.puts "\t\t\t<Configuration>#{c}</Configuration>\n"
						file.puts "\t\t\t<Platform>#{p}</Platform>\n"
						file.puts "\t\t</ProjectConfiguration>\n"
					end
				end

				file.puts "\t</ItemGroup>"

				file.puts "\t<PropertyGroup Label=\"Globals\">\n"
				file.puts "\t\t<ProjectGuid>#{project_guid}</ProjectGuid>\n"

				if @vcproj_platform == :uwp
					file.puts "\t\t<PlatformToolset>#{@version.platform_toolset}</PlatformToolset>\n"
					file.puts "\t\t<RootNamespace>#{@project.name}</RootNamespace>\n"
					file.puts "\t\t<ApplicationType>Windows Store</ApplicationType>\n"
					file.puts "\t\t<AppContainerApplication>true</AppContainerApplication>\n"
					file.puts "\t\t<ApplicationType>Windows Store</ApplicationType>\n"
					file.puts "\t\t<WindowsTargetPlatformVersion>10.0.10586.0</WindowsTargetPlatformVersion>\n"
					file.puts "\t\t<WindowsTargetPlatformMinVersion>10.0.10240.0</WindowsTargetPlatformMinVersion>\n"
					file.puts "\t\t<ApplicationTypeRevision>10.0</ApplicationTypeRevision>\n"
				elsif @vcproj_platform == :android
					file.puts "\t\t<PlatformToolset>Gcc_4_9</PlatformToolset>\n"
				    file.puts "\t\t<DefaultLanguage>en-US</DefaultLanguage>"
					file.puts "\t\t<MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>"
					file.puts "\t\t<ApplicationType>Android</ApplicationType>"
					file.puts "\t\t<ApplicationTypeRevision>3.0</ApplicationTypeRevision>"
					file.puts "\t\t<AndroidAPILevel>21</AndroidAPILevel>"
					file.puts "\t\t<ThumbMode>ARM</ThumbMode>"
				else
					file.puts "\t\t<PlatformToolset>#{@version.platform_toolset}</PlatformToolset>\n"
					file.puts "\t\t<Keyword>MakeFileProj</Keyword>\n"
				end

				file.puts "\t</PropertyGroup>\n"

				file.puts "\t<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n"

				require_lace_build = false

				nx_sdk_path = project.globals.nx_sdk_path.to_s.gsub( /\//, '\\' )

				valid_builds.each do |build|
					project = find_project( build )
					platform = get_platform( build, @vcproj_platform )
					configuration_name = get_configuration_name( build, @vcproj_platform )

					target_dir = make_local(project.build_path)
					build_cmd = build_command(build, jobs,"&quot;",keep_dirs, [ '--msvc-diagnostics' ])

					if @vcproj_platform == :tegra
						build_cmd = build_command(build, jobs,"&quot;",keep_dirs, [ '--msvc-diagnostics' ])
						target_dir = make_local(project.build_path)

						file.puts "\t<PropertyGroup Label=\"Configuration\" Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|Tegra-Android'\">"
						file.puts "\t\t<ConfigurationType>ExternalBuildSystem</ConfigurationType>"
						file.puts "\t</PropertyGroup>"

						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|Tegra-Android'\">"

						file.puts "\t\t<NMakeBuildCommandLine>#{build_cmd}</NMakeBuildCommandLine>\n"
						file.puts "\t\t<NMakeReBuildCommandLine>#{build_cmd} -r</NMakeReBuildCommandLine>\n"
						file.puts "\t\t<NMakeCleanCommandLine>#{build_cmd} -c</NMakeCleanCommandLine>\n"

						file.puts "\t\t<NMakePreprocessorDefinitions>"
						file.puts "\t\t</NMakePreprocessorDefinitions>"
						file.puts "\t\t<NMakeIncludeSearchPath>"
						file.puts "\t\t</NMakeIncludeSearchPath>"
						file.puts "\t\t<NMakeForcedIncludes>"
						file.puts "\t\t</NMakeForcedIncludes>"
						file.puts "\t\t<SdkRootPath>$(Registry:HKEY_LOCAL_MACHINE\\Software\\NVIDIA Corporation\\Nsight Tegra@sdkRoot)</SdkRootPath>"
						file.puts "\t\t<JdkRootPath>$(Registry:HKEY_LOCAL_MACHINE\\Software\\NVIDIA Corporation\\Nsight Tegra@jdkRoot)</JdkRootPath>"
						file.puts "\t\t<OutDir>#{target_dir}</OutDir>"
						file.puts "\t\t<AndroidClearUserData>false</AndroidClearUserData>"
						file.puts "\t</PropertyGroup>"
					elsif @vcproj_platform == :uwp
						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\" Label=\"Configuration\">\n"
						file.puts "\t\t<ConfigurationType>Application</ConfigurationType>\n"
						file.puts "\t\t<TargetName>#{project.name}</TargetName>\n"
						file.puts "\t\t<UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>\n"
						file.puts "\t\t<UseDebugLibraries>true</UseDebugLibraries>\n" if is_debug_config( build )
						file.puts "\t\t<LaceBuild>#{build}</LaceBuild>"
						file.puts "\t</PropertyGroup>\n"
						require_lace_build = true
					elsif @vcproj_platform == :android
						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\" Label=\"Configuration\">\n"
						file.puts "\t\t<ConfigurationType>DynamicLibrary</ConfigurationType>\n"
						file.puts "\t\t<TargetName>libkeengame</TargetName>\n"
						file.puts "\t\t<UseDebugLibraries>true</UseDebugLibraries>\n" if is_debug_config( build )
						file.puts "\t\t<LaceBuild>#{build}</LaceBuild>"
						file.puts "\t</PropertyGroup>\n"
						require_lace_build = true
					elsif @vcproj_platform == :default
						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\" Label=\"Configuration\">\n"
	    				file.puts "\t\t<ConfigurationType>Application</ConfigurationType>\n"
	    				file.puts "\t\t<UseDebugLibraries>true</UseDebugLibraries>\n" if is_debug_config( build )
	    				file.puts "\t\t<LaceBuild>#{build}</LaceBuild>\n"

	    				if is_native_nx_config( build )
			    			file.puts "\t\t<NintendoSdkRoot>#{nx_sdk_path}</NintendoSdkRoot>\n"
    						file.puts "\t\t<NintendoSdkSpec>NX</NintendoSdkSpec>\n"
	    				end

	    				file.puts "\t</PropertyGroup>\n"
	    				require_lace_build = true
					end
				end

				file.puts "\t<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n"

				if @vcproj_platform == :default
					file.puts "\t<PropertyGroup Condition=\"'$(DebuggerFlavor)'=='ORBISDebugger'\" Label=\"OverrideDebuggerDefaults\">\n"
					file.puts "\t\t<!--LocalDebuggerCommand>$(TargetPath)</LocalDebuggerCommand-->\n"
					file.puts "\t\t<!--LocalDebuggerCommandArguments></LocalDebuggerCommandArguments-->\n"
					file.puts "\t\t<!--LocalDebuggerTarget></LocalDebuggerTarget-->\n"
					file.puts "\t\t<!--LocalDebuggerWorkingDirectory>$(ProjectDir)</LocalDebuggerWorkingDirectory-->\n"
					file.puts "\t\t<!--LocalRunCommandLine></LocalRunCommandLine-->\n"
					file.puts "\t</PropertyGroup>\n"
				end

				file.puts "\t\t<ImportGroup Label=\"ExtensionSettings\">\n"
				file.puts "\t</ImportGroup>\n"

				if @vcproj_platform != :tegra
					valid_builds.each do |build|
						project = find_project( build )
						platform = get_platform( build, @vcproj_platform )
						configuration_name = get_configuration_name( build, @vcproj_platform )

						file.puts "\t<ImportGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\" Label=\"PropertySheets\">\n"
						file.puts "\t\t<Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n"

						if is_native_nx_config( build )
    						file.puts "\t\t<Import Project=\"#{nx_sdk_path}\\Build\\Vc\\NintendoSdkVcProjectSettings.props\" Condition=\"('$(NintendoSdkRoot)' != '') and Exists('$(NintendoSdkRoot)\Build\Vc\NintendoSdkVcProjectSettings.props')\"/>\n"
    					end

						file.puts "\t</ImportGroup>\n"
					end
				end

				file.puts "\t<PropertyGroup Label=\"UserMacros\" />\n"

				if @vcproj_platform != :tegra
					valid_builds.each do |build|
						project = find_project( build )
						platform = get_platform( build, @vcproj_platform )
						configuration_name = get_configuration_name( build, @vcproj_platform )

						intermediate_directory = build.gsub(/\//, '\\') + '\\intermediate\\'
						output_directory = build.gsub(/\//, '\\') + '\\'

						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">\n"

						if is_xb1_config( build )
							deploy_directory = output_directory + 'package'
							deploy_directory = deploy_directory.gsub(/\//, '\\') + '\\'
							file.puts "\t\t<LayoutDir>#{deploy_directory}</LayoutDir>\n"
						end

						file.puts "\t\t<IntDir>$(ProjectDir)#{intermediate_directory}</IntDir>\n"
						file.puts "\t\t<OutDir>$(ProjectDir)#{output_directory}</OutDir>\n"

						executable_extension = get_attribute(:vcproj_executable_extension, build).first || ".exe"
						executable_base_filename = get_attribute(:executable_basename,build).first || (project.globals.target_name || project.name)

						if executable_base_filename != project_name && @vcproj_platform == :default
							file.puts "\t\t<TargetName>#{executable_base_filename}</TargetName>\n"
						end

						if executable_extension != ".exe"
							file.puts "\t\t<TargetExt>#{executable_extension}</TargetExt>"
						end

						if is_ps4_config( build )
						    file.puts "\t\t<LocalDebuggerWorkingDirectory>#{output_directory}</LocalDebuggerWorkingDirectory>"
						    file.puts "\t\t<DebuggerFlavor>ORBISDebugger</DebuggerFlavor>"
						end

						file.puts "\t</PropertyGroup>\n"
					end

					valid_builds.each do |build|
						project = find_project( build )
						platform = get_platform( build, @vcproj_platform )
						configuration_name = get_configuration_name( build, @vcproj_platform )

						target_dir = make_local(project.build_path)
						build_cmd = build_command(build, jobs,"&quot;",keep_dirs, [ '--msvc-diagnostics' ])

						include_dirs = get_attribute(:cpp_include_dir, build)
						include_dirs += get_attribute(:cpp_system_include_dir, build)
						include_dirs_string = include_dirs.map {|einc| make_local(einc)}.join(';')

						libs = get_attribute(:libs).join(';')

						file.puts "\t<ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">\n"
						file.puts "\t\t<ClCompile>\n"
						file.puts "\t\t\t<PrecompiledHeader>NotUsing</PrecompiledHeader>\n"
						file.puts "\t\t\t<PreprocessorDefinitions>#{get_attribute(:cpp_define, build).join(';')}</PreprocessorDefinitions>\n"
						file.puts "\t\t\t<AdditionalIncludeDirectories>#{include_dirs_string}</AdditionalIncludeDirectories>\n"
						file.puts "\t\t</ClCompile>\n"
						file.puts "\t\t<Link>\n"
						file.puts "\t\t\t<AdditionalDependencies>#{libs}</AdditionalDependencies>\n"
						file.puts "\t\t\t<AdditionalLibraryDirectories></AdditionalLibraryDirectories>\n"
						file.puts "\t\t</Link>\n"
						file.puts "\t</ItemDefinitionGroup>\n"
					end
				end

				file.puts "\t<ItemDefinitionGroup>\n"
				file.puts "\t</ItemDefinitionGroup>\n"

				filenames = get_files

				# now make relativ paths from the filenames
				filenames = filenames.map {|filename| make_local(filename) }

				# write file list:
				file << "\t<ItemGroup>\n"

				filenames.each do |filename|
					if is_source_file( filename )
						include_type = "ClCompile"
					elsif is_header_file( filename )
						include_type = "ClInclude"
					else
						include_type = "None"
					end

					file << "\t\t<#{include_type} Include=\"" + filename.gsub(/\//, '\\') + "\"/>\n"
				end

				file << "\t</ItemGroup>\n"

				# :JK: this line is here to load the SC VSI extension .. I'm not sure if it hurts when the extension is not installed/no ps4 target is present..
				if @vcproj_platform == :default
					file.puts "\t<Import Condition=\"'$(ConfigurationType)' == 'Makefile' and Exists('$(VCTargetsPath)\\Platforms\\$(Platform)\\SCE.Makefile.$(Platform).targets')\" Project=\"$(VCTargetsPath)\\Platforms\\$(Platform)\\SCE.Makefile.$(Platform).targets\" />\n"
				end
				file.puts "\t<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n"
				file.puts "\t<ImportGroup Label=\"ExtensionTargets\">\n"
				file.puts "\t</ImportGroup>\n"

				if require_lace_build
					lace_build_cmd = build_command(valid_builds.first, jobs, "",keep_dirs, [ '--msvc-diagnostics' ] ).gsub('-b ' + valid_builds.first, '-b $(LaceBuild)')
					file.puts "\t<Target Name=\"Build\" Condition=\"'$(ConfigurationType)' == 'Application' OR '$(ConfigurationType)' == 'DynamicLibrary'\" Outputs=\"$(TargetPath)\" DependsOnTargets=\"_PrepareForBuild\">\n"
					file.puts "\t\t<Exec Command=\"#{lace_build_cmd}\" />\n"
					file.puts "\t</Target>\n"
					file.puts "\t<Target Name=\"Clean\" Condition=\"'$(ConfigurationType)' == 'Application' OR '$(ConfigurationType)' == 'DynamicLibrary'\" DependsOnTargets=\"$(CleanDependsOn)\">\n"
					file.puts "\t\t<Exec Command=\"#{lace_build_cmd} -c\" />\n"
					file.puts "\t</Target>\n"
					file.puts "\t<Target Name=\"Rebuild\" Condition=\"'$(ConfigurationType)' == 'Application' OR '$(ConfigurationType)' == 'DynamicLibrary'\" DependsOnTargets=\"$(CleanDependsOn)\">\n"
					file.puts "\t\t<Exec Command=\"#{lace_build_cmd} -r\" />\n"
					file.puts "\t</Target>\n"
				end

				file.puts "</Project>\n"
			end

			if @vcproj_platform == :android
				user_basename = '../' + filename.basename.to_s + '.user'
				user_filename = filename + user_basename

				open_file( user_filename ) do |file|
					file.puts "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
					file.puts "<Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"

					valid_builds.each do |build|
						project = find_project(build)
						platform = get_platform( build, @vcproj_platform )
						configuration_name = get_configuration_name( build, @vcproj_platform )

						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|#{platform}'\">"
						file.puts "\t\t<PackagePath>$(TargetDir)\\#{project.name}.apk</PackagePath>"
						file.puts "\t\t<DebuggerFlavor>AndroidDebugger</DebuggerFlavor>"
						file.puts "\t\t<AdditionalSymbolSearchPaths>$(TargetDir);$(AdditionalSymbolSearchPaths)</AdditionalSymbolSearchPaths>"
						file.puts "\t</PropertyGroup>"
					end

					file.puts "</Project>\n"
				end
			end

			if @vcproj_platform == :tegra
				user_basename = '../' + filename.basename.to_s + '.user'
				user_filename = filename + user_basename

				open_file( user_filename ) do |file|
					file.puts "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
					file.puts "<Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"

					valid_builds.each do |build|
						project = find_project(build)
						configuration_name = get_configuration_name( build, @vcproj_platform )
						executable_base_filename = get_attribute(:executable_basename,build).first || (@project.globals.target_name || @project.name)
						target_apk_string = ( project.build_path + executable_base_filename ).to_s

						file.puts "\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='#{configuration_name}|Tegra-Android'\">"
						file.puts "\t\t<OverrideAPKPath>#{target_apk_string}.apk</OverrideAPKPath>"
						file.puts "\t\t<DebuggerFlavor>AndroidDebugger</DebuggerFlavor>"
						file.puts "\t\t<AndroidAttach>True</AndroidAttach>"
						file.puts "\t\t<BuildXmlPath>$(ProjectDir)</BuildXmlPath>"
						file.puts "\t\t<GdbSetupPath />"
						file.puts "\t\t<AdditionalLibraryDirectories />"
						file.puts "\t\t<AdditionalGdbDirectories />"
						file.puts "\t\t<JavaClassesDir />"
						file.puts "\t\t<JavaSourceDir />"
						file.puts "\t</PropertyGroup>"
					end

					file.puts "</Project>\n"
				end
			end

			filter_basename = '../' + filename.basename.to_s + '.filters'
			filter_filename = filename + filter_basename

			open_file(filter_filename) do |file|

				file.puts "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
				file.puts "<Project ToolsVersion=\"#{@vcproj_version}\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"

				filenames = get_files

				# collect .cpp/.hpp and other files:
				# :TODO: use tags for this..

				# now make relativ paths from the filenames
				filenames = filenames.map {|filename| make_local(filename) }

				source_files = []
				header_files = []
				other_files = []

				filter_ids = {}

				# put each file into the correct hash:
				filenames.each do |filename|
					# strip leading '../'
					namefolders = get_filter_folder_list( filename )

					# now we have to add all base paths up to the final one:
					for i in 0 .. namefolders.size - 1 do
						folder_name = i == 0 ? namefolders.at(0) : folder_name + '\\' + namefolders.at( i )

						if (not filter_ids[ folder_name ] )
							# this is not a real guid.. but who cares..
							filter_ids[ folder_name ] = 'f325e77a-a9cb-44cb-90c1-%012x' % filter_ids.size
						end
					end

					if is_source_file( filename )
						source_files << filename
					elsif is_header_file( filename )
						header_files << filename
					else
						other_files << filename
					end
				end

				# write the files:
				write_file_item_group( file, source_files, 1, 'ClCompile' )
				write_file_item_group( file, header_files, 1, 'ClInclude' )
				write_file_item_group( file, other_files, 1, 'None' )

				# write all filters:
				file.puts "\t<ItemGroup>\n"
				filter_ids.each do |filter_name,filter_uuid|
					file.puts "\t\t<Filter Include=\"#{filter_name}\">\n"
					file.puts "\t\t\t<UniqueIdentifier>#{filter_uuid}</UniqueIdentifier>\n"
					file.puts "\t\t</Filter>\n"
				end
				file.puts "\t</ItemGroup>\n"

				file.puts "</Project>\n"
			end
		end

		def is_source_file(filename)
			source_file_extensions = [ '.cpp', '.c', '.asm', '.s', '.cxx' ]
			source_file_extensions.include?( File.extname( filename ) )
		end

		def is_header_file(filename)
			header_file_extensions = [ '.hpp', '.h', '.inl', '.hxx' ]
			header_file_extensions.include?( File.extname( filename ) )
		end

		def get_filter_folder_list( filename )
			namefolders = filename.split(/\/|\\/)
			basename = namefolders.pop
			while namefolders.at(0) == ".."
				namefolders.shift
			end
			return namefolders
		end

		def write_file_item_group(file, filenames, indent, prefix)

			file << ?\t.chr * (indent) << "<ItemGroup>\n"
			filenames.each do |filename|
				namefolders = get_filter_folder_list( filename )
				filter_name = namefolders.join( '\\' )

				file << ?\t.chr * (indent+1) << '<' + prefix + " Include=\"" + filename + "\">\n"
				file << ?\t.chr * (indent+2) << "<Filter>" + filter_name + "</Filter>\n"
				file << ?\t.chr * (indent+1) << "</" + prefix + ">\n"
			end

			file << ?\t.chr * (indent) << "</ItemGroup>\n"
		end
	end
end

project_file = 'project.lace'
vcproj_file = nil
vcproj_version = ENV['LACE_VCPROJ_VERSION'] || '14.00'
vcproj_jobs = ENV['NUMBER_OF_PROCESSORS'] || '1'
vcproj_platform = :default

#p "vcproj_version=#{vcproj_version}"

OptionParser.new do |opts|
	opts.banner = "Usage: create_vcxproject.rb [OPTIONS] [BUILDS]"
	opts.on("-p", "--project PROJECT_FILE", "The project file to read (default: project.lace)") do |fname|
		project_file = fname
	end
	opts.on("-o", "--output VCXPROJ_FILENAME", "The filename of the resulting .vcproj file (default: build/<project_name>.vcxproj)") do |fname|
		vcproj_file = fname
	end
	opts.on("-j", "--jobs NUM_JOBS", Integer, "Number of compile jobs to execute in parallel") do |jobs|
		vcproj_jobs = jobs
	end
	opts.on("-t", "--android", "Create Andoird Native project") do |jobs|
		vcproj_platform = :android
	end
	opts.on("-t", "--tegra", "Create Andoird tegra targets") do |jobs|
		vcproj_platform = :tegra
	end
	opts.on("-u", "--uwp", "Create Universal Window Platform project") do |jobs|
		vcproj_platform = :uwp
	end
end.parse!

#puts "project_file=#{project_file}"

writer = Lace::VisualStudioProjectFileWriter.new( project_file, ARGV, vcproj_version, vcproj_platform )

file_name = if vcproj_file
	vcproj_file
else
	name_append = ''
	name_append += '_android' if vcproj_platform == :android
	name_append += '_tegra' if vcproj_platform == :tegra
	name_append += '_uwp' if vcproj_platform == :uwp
	writer.project.name + name_append
end

target_name = writer.project.path + "build/#{file_name}.vcxproj"
writer.write( target_name, vcproj_jobs )
